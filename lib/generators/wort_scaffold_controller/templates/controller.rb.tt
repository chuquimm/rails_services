# frozen_string_literal: true

<% module_namespacing do -%>
# <%= controller_class_name %>Controller
class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_table_name %>, only: %i[show edit update destroy]<% if @parent_attribute %>
  before_action :set_<%= @parent_attribute.name %>, only: %i[new create]<% end %>

  # GET <%= route_url %>
  def index
    @<%= plural_table_name %> = ::<%= class_name.pluralize %>::Query.new.call.query
  end

  # GET <%= route_url %>/1
  def show; end

  # GET <%= route_url %>/new
  def new
    @<%= singular_table_name %> = ::<%= orm_class.build(class_name) %>
  end

  # GET <%= route_url %>/1/edit
  def edit; end

  # POST <%= route_url %>
  def create
    @<%= singular_table_name %> = ::<%= class_name.pluralize %>::Create.new(<% if @parent_attribute %>@<%= @parent_attribute.name %>, <% end %><%= singular_table_name %>_params).call.record

    if @<%= singular_table_name %>.persisted?
      flash[:success] = c_t('success.create')
      redirect_to <%= redirect_resource_name %>
    else
      render :new, status: :unprocessable_entity
    end
  end

  # PATCH/PUT <%= route_url %>/1
  def update
    if ::<%= class_name.pluralize %>::Update.new(@<%= singular_table_name %>, <%= singular_table_name %>_params).call.successful
      flash[:success] = c_t('success.update')
      redirect_to <%= redirect_resource_name %>, status: :see_other
    else
      render :edit, status: :unprocessable_entity
    end
  end

  # DELETE <%= route_url %>/1
  def destroy
    if ::<%= class_name.pluralize %>::Destroy.new(@<%= singular_table_name %>).call.successful
      flash[:success] = c_t('success.destroy')
      redirect_to <%= index_helper %>_url, status: :see_other
    else
      flash[:danger] = c_t('error.destroy')
      redirect_to @<%= singular_table_name %>, status: :see_other
    end
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_<%= singular_table_name %>
    @<%= singular_table_name %> = ::<%= orm_class.find(class_name, "params[:id]") %>
  end<% if @parent_attribute %>

  def set_<%= @parent_attribute.name %>
    @<%= @parent_attribute.name %> = ::<%= @parent_attribute.name.camelize %>.find(params[:<%= @parent_attribute.name %>_id])
  end<% end %>

  # Only allow a list of trusted parameters through.
  def <%= "#{singular_table_name}_params" %>
    <%- if attributes_names.empty? -%>
    params.fetch(:<%= singular_table_name %>, {})
    <%- else -%>
    params.require(:<%= singular_table_name %>).permit(<%= permitted_params %>)
    <%- end -%>
  end
end
<% end -%>
